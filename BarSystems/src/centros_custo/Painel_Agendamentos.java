
package centros_custo;

import financeiro.Class_Despesas;
import financeiro.Class_Receitas;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableModel;

public class Painel_Agendamentos extends javax.swing.JPanel {
    
    protected int id_usuario;
    protected String nome_usuario;

    public Painel_Agendamentos(int id_usuario, String nome_usuario) {
        initComponents();
        
        this.id_usuario = id_usuario;
        this.nome_usuario = nome_usuario;
        
        refreshLancamentos();
    }
    
    public void refreshLancamentos() {
        int flagReceita = 0, flagDespesa = 0;
        String data_de, data_ate;
        
        //PRIMEIRO VERIFICO O QUE DEVO PESQUISAR (TODOS, RECEITA OU DESPESA).
        String pesquisa = comboPesquisaLancamentos.getSelectedItem().toString();
        if (pesquisa.equals("Todos")) {
            flagReceita = 1;
            flagDespesa = 1;
        } else if (pesquisa.equals("Receita")) {
            flagReceita = 1;
        } else {
            flagDespesa = 1;
        }
        
        //REALIZO A FORMATAÇÃO DAS DATAS PARA A PESQUISA.
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        data_de = sdf.format(dataPesquisa1Lancamentos.getDate())+" 00:00:00";
        data_ate = sdf.format(dataPesquisa2Lancamentos.getDate())+" 23:59:59";
        
        //AGORA FAÇO A PESQUISA.
        DefaultTableModel modelo = (DefaultTableModel) tabelaAgendamentos.getModel();
        modelo.setRowCount(0);
        if (flagReceita == 1) {
            modelo.addRow(new Object[] {"--- RECEITAS ---", "", "", "", "", "", ""});
            Class_Receitas receitas = new Class_Receitas();
            receitas.carregaReceitas("Não liquidado", data_de, data_ate, modelo);
        }
        if (flagReceita == 1 && flagDespesa == 1) {
            modelo.addRow(new Object[] {"", "", "", "", "", "", ""});
        }
        if (flagDespesa == 1) {
            modelo.addRow(new Object[] {"--- DESPESAS ---", "", "", "", "", "", ""});
            Class_Despesas despesas = new Class_Despesas();
            despesas.carregaDespesas("Não liquidado", data_de, data_ate, modelo);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnLiquidarLancamentos = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaAgendamentos = new javax.swing.JTable();
        jLabel28 = new javax.swing.JLabel();
        comboPesquisaLancamentos = new javax.swing.JComboBox();
        jLabel29 = new javax.swing.JLabel();
        dataPesquisa1Lancamentos = new com.toedter.calendar.JDateChooser();
        jLabel30 = new javax.swing.JLabel();
        dataPesquisa2Lancamentos = new com.toedter.calendar.JDateChooser();
        jLabel31 = new javax.swing.JLabel();
        btnPesquisarLancamento = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        setLayout(null);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Agendamentos 24px.png"))); // NOI18N
        jLabel5.setText("Lançamentos agendados");
        add(jLabel5);
        jLabel5.setBounds(0, 30, 1020, 30);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText("Estão listados abaixo os lançamentos de receita e despesa agendados pelo administrador (inclui parcelas compras e vendas)");
        add(jLabel11);
        jLabel11.setBounds(20, 140, 960, 17);

        btnLiquidarLancamentos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnLiquidarLancamentos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Salvar 16px.png"))); // NOI18N
        btnLiquidarLancamentos.setText("Liquidar");
        btnLiquidarLancamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiquidarLancamentosActionPerformed(evt);
            }
        });
        add(btnLiquidarLancamentos);
        btnLiquidarLancamentos.setBounds(450, 500, 170, 30);

        tabelaAgendamentos.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tabelaAgendamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Descrição", "Forma Pagto", "Valor", "Parcelas", "Vencimento", "Liquidado", "Tipo", "Cod"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaAgendamentos.setRowHeight(25);
        tabelaAgendamentos.setSelectionBackground(new java.awt.Color(204, 255, 255));
        tabelaAgendamentos.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane4.setViewportView(tabelaAgendamentos);
        if (tabelaAgendamentos.getColumnModel().getColumnCount() > 0) {
            tabelaAgendamentos.getColumnModel().getColumn(0).setPreferredWidth(300);
            tabelaAgendamentos.getColumnModel().getColumn(1).setPreferredWidth(200);
            tabelaAgendamentos.getColumnModel().getColumn(2).setPreferredWidth(80);
            tabelaAgendamentos.getColumnModel().getColumn(3).setPreferredWidth(50);
            tabelaAgendamentos.getColumnModel().getColumn(4).setPreferredWidth(80);
            tabelaAgendamentos.getColumnModel().getColumn(5).setPreferredWidth(70);
            tabelaAgendamentos.getColumnModel().getColumn(6).setPreferredWidth(50);
            tabelaAgendamentos.getColumnModel().getColumn(7).setPreferredWidth(30);
        }

        add(jScrollPane4);
        jScrollPane4.setBounds(20, 170, 960, 300);

        jLabel28.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel28.setText("A pesquisar");
        add(jLabel28);
        jLabel28.setBounds(20, 100, 80, 17);

        comboPesquisaLancamentos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        comboPesquisaLancamentos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Receita", "Despesa" }));
        add(comboPesquisaLancamentos);
        comboPesquisaLancamentos.setBounds(110, 90, 120, 30);

        jLabel29.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel29.setText("Período");
        add(jLabel29);
        jLabel29.setBounds(270, 100, 49, 17);

        dataPesquisa1Lancamentos.setDate(new Date());
        dataPesquisa1Lancamentos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        dataPesquisa1Lancamentos.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dataPesquisa1LancamentosPropertyChange(evt);
            }
        });
        add(dataPesquisa1Lancamentos);
        dataPesquisa1Lancamentos.setBounds(330, 90, 140, 30);

        jLabel30.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel30.setText("Até");
        add(jLabel30);
        jLabel30.setBounds(490, 100, 21, 17);

        dataPesquisa2Lancamentos.setDate(new Date());
        dataPesquisa2Lancamentos.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        dataPesquisa2Lancamentos.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dataPesquisa2LancamentosPropertyChange(evt);
            }
        });
        add(dataPesquisa2Lancamentos);
        dataPesquisa2Lancamentos.setBounds(530, 90, 140, 30);

        jLabel31.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel31.setText("Situação");
        add(jLabel31);
        jLabel31.setBounds(710, 100, 55, 17);

        btnPesquisarLancamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Pesquisar 16px.png"))); // NOI18N
        btnPesquisarLancamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarLancamentoActionPerformed(evt);
            }
        });
        add(btnPesquisarLancamento);
        btnPesquisarLancamento.setBounds(940, 90, 40, 30);

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setText("Não liquidado");
        add(jLabel13);
        jLabel13.setBounds(790, 100, 130, 17);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLiquidarLancamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiquidarLancamentosActionPerformed
/*
        int linha = tabelaAgendamentos.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um lançamento na tabela para liquidar!", "Atenção", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel modelo = (DefaultTableModel) tabelaAgendamentos.getModel();
            String tipo = modelo.getValueAt(linha, 6).toString();
            if (tipo.equals("")) {
                JOptionPane.showMessageDialog(null, "Selecione um lançamento na tabela para liquidar!", "Atenção", JOptionPane.WARNING_MESSAGE);
            } else {
                if (JOptionPane.showConfirmDialog(null, "Deseja realmente liquidar este lançamento?", "Atenção", JOptionPane.YES_NO_OPTION) == 0) {

                    Class_Caixa caixa = new Class_Caixa();
                    int id_caixa = caixa.getIdCaixa(id_centro_custo);
                    String descricao = modelo.getValueAt(linha, 0).toString();
                    String forma_pagto = modelo.getValueAt(linha, 1).toString();
                    int numero_parcelas = Integer.valueOf(modelo.getValueAt(linha, 3).toString());
                    String valor = modelo.getValueAt(linha, 2).toString().replace("R$ ", "");
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                    String data_pagto = sdf.format(new Date());
                    caixa.registraMovimentacaoCaixa(id_caixa, descricao, forma_pagto, numero_parcelas, valor, tipo, id_usuario,
                        data_pagto);
                    int id_movimentacao = caixa.getIdUltimaMovimentacaoCaixa();

                    int id = Integer.valueOf(modelo.getValueAt(linha, 7).toString());
                    if (tipo.equals("Receita")) {
                        Class_Receitas receitas = new Class_Receitas();
                        receitas.liquidarReceitaPelaMovimentacaoCaixa(id_movimentacao, id, data_pagto);
                    } else {
                        Class_Despesas despesas = new Class_Despesas();
                        despesas.liquidarDespesaPelaMovimentacaoCaixa(id_movimentacao, id, data_pagto);
                    }

                    Agendamentos.dispose();

                    caixa.carregaMovimentacoesCaixa((DefaultTableModel) tabelaMovimentacoesCaixa.getModel(), id_caixa);

                    JOptionPane.showMessageDialog(null, "Lançamento liquidado com sucesso!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }*/
        
    }//GEN-LAST:event_btnLiquidarLancamentosActionPerformed

    private void dataPesquisa1LancamentosPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dataPesquisa1LancamentosPropertyChange

        if (dataPesquisa2Lancamentos.getDate().before(dataPesquisa1Lancamentos.getDate())) {
            dataPesquisa2Lancamentos.setDate(dataPesquisa1Lancamentos.getDate());
        }
    }//GEN-LAST:event_dataPesquisa1LancamentosPropertyChange

    private void dataPesquisa2LancamentosPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dataPesquisa2LancamentosPropertyChange

        if (dataPesquisa2Lancamentos.getDate().before(dataPesquisa1Lancamentos.getDate())) {
            dataPesquisa2Lancamentos.setDate(dataPesquisa1Lancamentos.getDate());
        }
    }//GEN-LAST:event_dataPesquisa2LancamentosPropertyChange

    private void btnPesquisarLancamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarLancamentoActionPerformed

        refreshLancamentos();
        
    }//GEN-LAST:event_btnPesquisarLancamentoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLiquidarLancamentos;
    private javax.swing.JButton btnPesquisarLancamento;
    private javax.swing.JComboBox comboPesquisaLancamentos;
    private com.toedter.calendar.JDateChooser dataPesquisa1Lancamentos;
    private com.toedter.calendar.JDateChooser dataPesquisa2Lancamentos;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tabelaAgendamentos;
    // End of variables declaration//GEN-END:variables
}
